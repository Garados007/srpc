// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: simple_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ExampleProject {

  /// <summary>Holder for reflection information generated from simple_service.proto</summary>
  public static partial class SimpleServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for simple_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SimpleServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRzaW1wbGVfc2VydmljZS5wcm90bxIMc3JwYy5leGFtcGxlIkoKE1JhbmRv",
            "bk51bWJlclJlcXVlc3QSDQoFY291bnQYASABKAUSEQoJbWluX3ZhbHVlGAIg",
            "ASgFEhEKCW1heF92YWx1ZRgDIAEoBSImChRSYW5kb21OdW1iZXJSZXNwb25z",
            "ZRIOCgZudW1iZXIYASADKAUyaQoNU2ltcGxlU2VydmljZRJYCg9HZXRSYW5k",
            "b21OdW1iZXISIS5zcnBjLmV4YW1wbGUuUmFuZG9uTnVtYmVyUmVxdWVzdBoi",
            "LnNycGMuZXhhbXBsZS5SYW5kb21OdW1iZXJSZXNwb25zZUIRqgIORXhhbXBs",
            "ZVByb2plY3RiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ExampleProject.RandonNumberRequest), global::ExampleProject.RandonNumberRequest.Parser, new[]{ "Count", "MinValue", "MaxValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExampleProject.RandomNumberResponse), global::ExampleProject.RandomNumberResponse.Parser, new[]{ "Number" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RandonNumberRequest : pb::IMessage<RandonNumberRequest> {
    private static readonly pb::MessageParser<RandonNumberRequest> _parser = new pb::MessageParser<RandonNumberRequest>(() => new RandonNumberRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RandonNumberRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExampleProject.SimpleServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandonNumberRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandonNumberRequest(RandonNumberRequest other) : this() {
      count_ = other.count_;
      minValue_ = other.minValue_;
      maxValue_ = other.maxValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandonNumberRequest Clone() {
      return new RandonNumberRequest(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    /// the number of random numbers to generate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "min_value" field.</summary>
    public const int MinValueFieldNumber = 2;
    private int minValue_;
    /// <summary>
    /// the minimum value of the random numbers (inclusive)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinValue {
      get { return minValue_; }
      set {
        minValue_ = value;
      }
    }

    /// <summary>Field number for the "max_value" field.</summary>
    public const int MaxValueFieldNumber = 3;
    private int maxValue_;
    /// <summary>
    /// the maximum value of the random numbers (exclusive)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxValue {
      get { return maxValue_; }
      set {
        maxValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RandonNumberRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RandonNumberRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if (MinValue != other.MinValue) return false;
      if (MaxValue != other.MaxValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (MinValue != 0) hash ^= MinValue.GetHashCode();
      if (MaxValue != 0) hash ^= MaxValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (MinValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MinValue);
      }
      if (MaxValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (MinValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinValue);
      }
      if (MaxValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RandonNumberRequest other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.MinValue != 0) {
        MinValue = other.MinValue;
      }
      if (other.MaxValue != 0) {
        MaxValue = other.MaxValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 16: {
            MinValue = input.ReadInt32();
            break;
          }
          case 24: {
            MaxValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RandomNumberResponse : pb::IMessage<RandomNumberResponse> {
    private static readonly pb::MessageParser<RandomNumberResponse> _parser = new pb::MessageParser<RandomNumberResponse>(() => new RandomNumberResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RandomNumberResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExampleProject.SimpleServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomNumberResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomNumberResponse(RandomNumberResponse other) : this() {
      number_ = other.number_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomNumberResponse Clone() {
      return new RandomNumberResponse(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_number_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> number_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// the list of random numbers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Number {
      get { return number_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RandomNumberResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RandomNumberResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!number_.Equals(other.number_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= number_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      number_.WriteTo(output, _repeated_number_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += number_.CalculateSize(_repeated_number_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RandomNumberResponse other) {
      if (other == null) {
        return;
      }
      number_.Add(other.number_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            number_.AddEntriesFrom(input, _repeated_number_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
