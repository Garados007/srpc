// <auto-generated>
//     Generated by the sRPC compiler.  DO NOT EDIT!
//     source: Proto/simple_service.proto
// </auto-generated>
#pragma warning disable CS0067, CS0612, CS1591
#region Designer generated code

using gp = global::Google.Protobuf;
using gpw = global::Google.Protobuf.WellKnownTypes;
using s = global::System;
using scg = global::System.Collections.Generic;
using global::System.Linq;
using srpc = global::sRPC;
using st = global::System.Threading;
using stt = global::System.Threading.Tasks;

#nullable enable

namespace sRPC.Test.Proto
{
    /// <summary>
    /// The client of the SimpleService api
	/// <br/>
	/// a simple service definition
    /// </summary>
    public class SimpleServiceClient : srpc::IApiClientDefinition2
    {
        event s::Func<srpc::NetworkRequest, stt::Task<srpc::NetworkResponse>>? srpc::IApiClientDefinition.PerformMessage
        {
            add => PerformMessagePrivate += value;
            remove => PerformMessagePrivate -= value;
        }

        event s::Func<srpc::NetworkRequest, st::CancellationToken, stt::Task<srpc::NetworkResponse>>? srpc::IApiClientDefinition2.PerformMessage2
        {
            add => PerformMessage2Private += value;
            remove => PerformMessage2Private -= value;
        }

        private event s::Func<srpc::NetworkRequest, stt::Task<srpc::NetworkResponse>>? PerformMessagePrivate;

        private event s::Func<srpc::NetworkRequest, st::CancellationToken, stt::Task<srpc::NetworkResponse>>? PerformMessage2Private;

        /// <summary>
        /// Client call for Sqrt
		/// <br/>
		/// calculates the square root of the number
		/// </summary>
        /// <param name="message">
        /// request message
        /// </param>
		/// <returns>The result of the Api call</returns>
        public virtual stt::Task<sRPC.Test.Proto.SqrtResponse?> Sqrt(sRPC.Test.Proto.SqrtRequest message)
        {
            _ = message ?? throw new s::ArgumentNullException(nameof(message));
            return Sqrt(message, st::CancellationToken.None);
        }

        /// <summary>
        /// Client call for Sqrt
		/// <br/>
		/// calculates the square root of the number
		/// </summary>
        /// <param name="message">
        /// request message
        /// </param>
        /// <param name="cancellationToken">
        /// The token to cancel this request
        /// </param>
		/// <returns>The result of the Api call</returns>
        public virtual async stt::Task<sRPC.Test.Proto.SqrtResponse?> Sqrt(sRPC.Test.Proto.SqrtRequest message, st::CancellationToken cancellationToken)
        {
            _ = message ?? throw new s::ArgumentNullException(nameof(message));
            var networkMessage = new srpc::NetworkRequest()
            {
                ApiFunction = "Sqrt",
                Request = gpw::Any.Pack(message),
            };
            var response = PerformMessage2Private != null
                ? await PerformMessage2Private.Invoke(networkMessage, cancellationToken).ConfigureAwait(false)
                : await (PerformMessagePrivate?.Invoke(networkMessage) ?? stt::Task.FromResult(new srpc::NetworkResponse())).ConfigureAwait(false);
            return response.Response?.Unpack<sRPC.Test.Proto.SqrtResponse?>();
        }

        /// <summary>
        /// Client call for Sqrt
		/// <br/>
		/// calculates the square root of the number
		/// </summary>
        /// <param name="message">
        /// request message
        /// </param>
        /// <param name="timeout">
        /// The timeout after which the request should be cancelled
        /// </param>
		/// <returns>The result of the Api call</returns>
        public virtual async stt::Task<sRPC.Test.Proto.SqrtResponse?> Sqrt(sRPC.Test.Proto.SqrtRequest message, s::TimeSpan timeout)
        {
            _ = message ?? throw new s::ArgumentNullException(nameof(message));
            if (timeout.Ticks < 0)
                throw new s::ArgumentOutOfRangeException(nameof(timeout));
            using var cancellationToken = new st::CancellationTokenSource(timeout);
            return await Sqrt(message, cancellationToken.Token).ConfigureAwait(false);
        }

        /// <summary>
        /// Client call for Sqrt
		/// <br/>
		/// calculates the square root of the number
		/// </summary>
		/// <param name="value">
		/// the input value
		/// </param>
		/// <returns>The result of the Api call</returns>
		public virtual stt::Task<sRPC.Test.Proto.SqrtResponse?> Sqrt(
			double @value = 0)
        {
            var request = new sRPC.Test.Proto.SqrtRequest
            {
				Value = @value,
            };
            return Sqrt(request);
        }

        /// <summary>
        /// Client call for Sqrt
		/// <br/>
		/// calculates the square root of the number
		/// </summary>
		/// <param name="value">
		/// the input value
		/// </param>
        /// <param name="cancellationToken">
        /// The token to cancel this request
        /// </param>
		/// <returns>The result of the Api call</returns>
		public virtual stt::Task<sRPC.Test.Proto.SqrtResponse?> Sqrt(
			st::CancellationToken cancellationToken,
			double @value = 0)
        {
            var request = new sRPC.Test.Proto.SqrtRequest
            {
				Value = @value,
            };
            return Sqrt(request, cancellationToken);
        }

        /// <summary>
        /// Client call for Sqrt
		/// <br/>
		/// calculates the square root of the number
		/// </summary>
		/// <param name="value">
		/// the input value
		/// </param>
        /// <param name="timeout">
        /// The timeout after which the request should be cancelled
        /// </param>
		/// <returns>The result of the Api call</returns>
		public virtual stt::Task<sRPC.Test.Proto.SqrtResponse?> Sqrt(
			s::TimeSpan timeout,
			double @value = 0)
        {
            var request = new sRPC.Test.Proto.SqrtRequest
            {
				Value = @value,
            };
            return Sqrt(request, timeout);
        }

        /// <summary>
        /// Client call for Indefinite
		/// <br/>
		/// this call will never finish and will indefinitely run
		/// </summary>
		/// <returns>The result of the Api call</returns>
        public virtual stt::Task Indefinite()
        {
            return Indefinite(st::CancellationToken.None);
        }

        /// <summary>
        /// Client call for Indefinite
		/// <br/>
		/// this call will never finish and will indefinitely run
		/// </summary>
        /// <param name="cancellationToken">
        /// The token to cancel this request
        /// </param>
		/// <returns>The result of the Api call</returns>
        public virtual async stt::Task Indefinite(st::CancellationToken cancellationToken)
        {
            var networkMessage = new srpc::NetworkRequest()
            {
                ApiFunction = "Indefinite",
                Request = gpw::Any.Pack(new gpw::Empty()),
            };
            _ = PerformMessage2Private != null
                ? await PerformMessage2Private.Invoke(networkMessage, cancellationToken).ConfigureAwait(false)
                : await (PerformMessagePrivate?.Invoke(networkMessage) ?? stt::Task.FromResult(new srpc::NetworkResponse())).ConfigureAwait(false);
        }

        /// <summary>
        /// Client call for Indefinite
		/// <br/>
		/// this call will never finish and will indefinitely run
		/// </summary>
        /// <param name="timeout">
        /// The timeout after which the request should be cancelled
        /// </param>
		/// <returns>The result of the Api call</returns>
        public virtual async stt::Task Indefinite(s::TimeSpan timeout)
        {
            if (timeout.Ticks < 0)
                throw new s::ArgumentOutOfRangeException(nameof(timeout));
            using var cancellationToken = new st::CancellationTokenSource(timeout);
            await Indefinite(cancellationToken.Token).ConfigureAwait(false);
        }
    }

    /// <summary>
    /// The base class for the server implementation of the SimpleService api
    /// </summary>
    public abstract class SimpleServiceServerBase : srpc::IApiServerDefinition2
    {
        stt::Task<srpc::NetworkResponse?> srpc::IApiServerDefinition.HandleMessage(srpc::NetworkRequest request)
            => ((srpc::IApiServerDefinition2)this).HandleMessage2(request, st::CancellationToken.None);

        async stt::Task<srpc::NetworkResponse?> srpc::IApiServerDefinition2.HandleMessage2(srpc::NetworkRequest request, st::CancellationToken cancellationToken)
        {
            _ = request ?? throw new s::ArgumentNullException(nameof(request));
            switch (request.ApiFunction)
            {
                case "Sqrt":
                {
                        var req = request.Request?.Unpack<sRPC.Test.Proto.SqrtRequest?>();
                        if (req == null)
                            return new srpc::NetworkResponse()
                            {
                                Token = request.Token,
                            };
                        return new srpc::NetworkResponse()
                        {
                            Response = gpw::Any.Pack(await Sqrt(req, cancellationToken).ConfigureAwait(false)),
                            Token = request.Token,
                        };
                    }
                case "Indefinite":
                {
                        var req = request.Request?.Unpack<Google.Protobuf.WellKnownTypes.Empty?>();
                        if (req == null)
                            return new srpc::NetworkResponse()
                            {
                                Token = request.Token,
                            };
                        await Indefinite(cancellationToken).ConfigureAwait(false);
                        return new srpc::NetworkResponse()
                        {
                            Response = gpw::Any.Pack(new gpw::Empty()),
                            Token = request.Token,
                        };
                    }
                default:
                    await stt::Task.CompletedTask.ConfigureAwait(false);
                    throw new s::NotSupportedException($"{request.ApiFunction} is not defined");
            }
        }

        /// <summary>
        /// Server call for Sqrt
		/// <br/>
		/// calculates the square root of the number
		/// </summary>
        /// <param name="request">
        /// The api request object
        /// </param>
        /// <param name="cancellationToken">
        /// The token that signals the cancellation of the request
        /// </param>
		/// <returns>The result of the Api call</returns>
        public abstract stt::Task<sRPC.Test.Proto.SqrtResponse?> Sqrt(sRPC.Test.Proto.SqrtRequest request, st::CancellationToken cancellationToken);

        /// <summary>
        /// Server call for Indefinite
		/// <br/>
		/// this call will never finish and will indefinitely run
		/// </summary>
        /// <param name="request">
        /// The api request object
        /// </param>
        /// <param name="cancellationToken">
        /// The token that signals the cancellation of the request
        /// </param>
		/// <returns>The result of the Api call</returns>
        public abstract stt::Task Indefinite(st::CancellationToken cancellationToken);
    }
}

#endregion Designer generated code
